{
  "hash": "fce60aba3ca8d3274c39af5ba1b7b955",
  "result": {
    "markdown": "---\ntitle: Python in R Markdown\nauthor: Mark Edney\ndate: '2022-03-03'\nslug: []\ncategories:\n  - How-to\n  - R\n  - Python\n  - Rmarkdown\ndraft: false\ndescription: 'An R package for writting `Python` code in R Markdown'\nimage: 'python.jpg'\narchives:\n  - 2022/03\n---\n\n\n![](python.jpg)\n\n> Photo by [David Clode](https://unsplash.com/@davidclode?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/python?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n  \nThe main advantage of using the R Markdown format is the utility of running R code within the text. This is clearly more advantageous than just writing code in a Markdown file. R \nMarkdown is however limited to R code, unable to run Python scripts. The R library `reticulate` looks to add this capability. \n\n## Initial Setup \n\nThe initial setup requires the installation of the `reticulate` library, after installation you shouldn't need to call it, but I do in the preceding code. I have loaded the `trees` dataset as a test dataset and the tidyverse library just to explore the data a bit. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\nlibrary(tidyverse)\ndata(trees)\nglimpse(trees)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 31\nColumns: 3\n$ Girth  <dbl> 8.3, 8.6, 8.8, 10.5, 10.7, 10.8, 11.0, 11.0, 11.1, 11.2, 11.3, …\n$ Height <dbl> 70, 65, 63, 72, 81, 83, 66, 75, 80, 75, 79, 76, 76, 69, 75, 74,…\n$ Volume <dbl> 10.3, 10.3, 10.2, 16.4, 18.8, 19.7, 15.6, 18.2, 22.6, 19.9, 24.…\n```\n:::\n:::\n\n\nNow, R Studio will use your local version of Python when you write any code in a code chuck labelled with the \"{Python}\" header. If you don't have any local version, R Studio will ask if you would like to install Miniconda. From here, you will need to start downloading the required Python modules. \n\nModules can be downloaded with the `pip` python package installer from the terminal or command line. The easiest method in R Studio is within the terminal window next to the console window. The command used is `pip install \"module name\"`. Some modules can be tricky and won't work if not installed after other modules. \n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n## Multiple Environments\n\nAfter the setup, you should see some additional options in the environment in R Studio. You should see that you have the option to switch between the R and Python environments.\n\nData is transitioned from the R environment to the Python environment with the `r` variable. This method should pretty similar to the Shiny Apt's use of `input\\output`. It is not only data that can move between environments, but functions too.   \n\nThe following code takes data from the R environment and creates a plot in `Seaborn`. The mean values of the columns are calculated in `python` to be imported into the R environment. A simple linear model is created with the `SKlearn` module. \n\n\n::: {.cell}\n\n```{.python .cell-code}\ndata = r.trees\nmeans = np.mean(data, axis = 0)\ndata[\"big\"] = data.Height > means.Height \nsns.scatterplot(data = data, x= \"Girth\", y= \"Height\", hue = \"big\")\nsns.set_theme(color_codes=True)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/enviroment-1.png){width=672}\n:::\n\n```{.python .cell-code}\nfrom sklearn.linear_model import LinearRegression\nmdl = LinearRegression()\nmdl.fit(data[[\"Girth\"]], data[[\"Height\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinearRegression()\n```\n:::\n\n```{.python .cell-code}\nprint(mdl.coef_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1.05436881]]\n```\n:::\n:::\n\n\nData is transitioned from `Python` to, `R` similarly with the variable `py`. Information on models can be passed but not the models themselves. This is important if you are more comfortable creating models in `Python`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(py$means)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Girth   Height   Volume \n13.24839 76.00000 30.17097 \n```\n:::\n\n```{.r .cell-code}\nprint(py$mdl$intercept_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 62.03131\n```\n:::\n\n```{.r .cell-code}\npy$data %>%\n        ggplot(aes(x = Girth, y = Height, colour = big)) +\n        geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/return-3.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}