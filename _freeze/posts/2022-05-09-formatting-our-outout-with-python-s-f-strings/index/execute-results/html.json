{
  "hash": "09e5e91bcb5fb9d4d785d1ed6a52eb60",
  "result": {
    "markdown": "---\ntitle: Formatting our output with Python's F strings\nauthor: Mark Edney\ndate: '2022-05-09'\nslug: []\ncategories:\n  - How-to\n  - Python\ndraft: false\ndescription: 'Using F string to format the output from Python'\narchives:\n  - 2022/05\nimage: 'format.jpg'\n---\n\n![](format.jpg)\n\nI have recently been on a tear of different challenges on the site [HackerRank](hackerrank.com). I am about halfway through their 30 days of code and 10 days of statistics. These challenges often require to output number to a certain a number of significant digits. I've always thought that the `round` function can be used for this, but I am wrong. The F string seems to be a powerful tool to accomplish this, and worth your time learning if you are unfamiliar. \n\n## Structure of an F string\n\nThe formatting of an F string starts with a `f` prior to quotations, whether they be single or double quotes. Any variable can then be included within a series of `{}`. This formatting can make it easier than turning values into strings and concatenating all strings into a single line of text. This is easily demonstrated with a large mix of values and strings.  \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nx = 1/3\ny = 1/6\n\nprint(\"The value is \" + str(x) + \" is greater than \" + str(y))\nprint(f\"The value is {x} is greater than {y}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe value is 0.3333333333333333 is greater than 0.16666666666666666\nThe value is 0.3333333333333333 is greater than 0.16666666666666666\n```\n:::\n:::\n\n\nThe values can then be formatted with `:` after the variable name. The number of digits prior and post the decimal can then be specified. The `f` is added after the decimal formatting to ensure the value is treated as a float. \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nprint(f\"The value is {x:.3f} is greater than {y:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe value is 0.333 is greater than 0.17\n```\n:::\n:::\n\n\nThe values passed are not specific to the number of digits, but the minimum number of spaces. This means you can ensure specific space aligned, such as for a table, by including these values.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nz = [10000, 500, 10, 0.001, .1]\nfor i in z:\n        print(f\"the value is: {i:5}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthe value is: 10000\nthe value is:   500\nthe value is:    10\nthe value is: 0.001\nthe value is:   0.1\n```\n:::\n:::\n\n\nAdditionally, we can add leading zeros by adding zero prior to the number of digits. \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfor i in z:\n        print(f\"the value is: {i:05}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthe value is: 10000\nthe value is: 00500\nthe value is: 00010\nthe value is: 0.001\nthe value is: 000.1\n```\n:::\n:::\n\n\n## Alternative formatting\n\nThere are a few alternative methods for f strings. From my understanding, they are not as fast when it comes to performance. I don't think that is of particular importance. If your script needs a high level of performance, than you probably don't want many print statements. \n\n### Format Method()\n\nThe `format` method is very similar to `f strings` with the use of the `{}`. The string is not preceded by f and the `{}` can remain empty or contain position indexing. The values are then added in the `.format` function after the string. The order of the variable in the string will correspond with the number used in the `{}`, if used at all. \n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprint(\"The value is {} is greater than {}\".format(1/3, 1/6))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe value is 0.3333333333333333 is greater than 0.16666666666666666\n```\n:::\n:::\n\n\n### Old % Method\n\nThe Old % operator (modulo) replaces the value in the string. Formatting details, such as those previously discussed, are entered after the `%`. The variables or values are then entered after the string when preceded by another `%`. Multiple values can be passed.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nprint(\"The value is %5.3f is greater than %5.3f\" %(x,y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe value is 0.333 is greater than 0.167\n```\n:::\n:::\n\n\n## Conclusions\nWhichever method you decide, it probably won't make a huge difference. The important part is to understand is the actual formatting. F strings also seem to make it easier to understand the code, as the actual values are inline with the string and the formatting.\n\n>Photo by [Sigmund](https://unsplash.com/@sigmund?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/output?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}