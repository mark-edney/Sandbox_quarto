{
  "hash": "351507f5b945035c66254a8abc2248e1",
  "result": {
    "markdown": "---\ntitle: 'Custom OpenAI Chatbot Pt1: PDF scanning'\nauthor: Mark Edney\ndate: 2023-10-30\ncategories: [How-to,Python,AI]\ndraft: false\ndescription: 'A PDF OCR reader for the creation of an chatbot.'\nimage: 'chat.jpg'\narchives:\n  - 2023/10\ntoc: false\n\nformat:\n  html:\n    code-fold: show\n    code-tools: true\n---\n\n[![Photo by Levart_Photographer on Unsplash](chat.jpg)](https://unsplash.com/@siva_photography?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)\n\n  \n\n# Introduction\nI have recently completed a project at work, the creation of a custom ChatGPT chatbot.\nI will break the project into two parts, the first part will scan a folder of PDF\nfiles into a dataframe and the second part will pass the data to OpenAI API. This\nentire project was completed in `python`. \n\n# Project outline\nPDFs can be easily scanned in `python` with the `pypdf` module. It is easily installed\nand easily run, but I have found that the quality of the scan to be lacking. `Pypdf` also \nseems to have some issues with PDFs that created from scanned documents, not directly\ncreated from a text document. For this reason, I have found an alternative method.\n\nThe first step is to convert all the PDFs in a directory to PNG images. This can\nbe achieved with the `convert from path` function from the `pdf2image` library with\nthe poppler application. The poppler program can be downloaded [here](https://poppler.freedesktop.org/) and unzipped into its own directory. There is no Windows version on the poppler site, but I found a repo with a nearly updated Windows version [here](https://github.com/oschwartz10612/poppler-windows/releases). \nYou will need to copy the directory path into your code. We can create a for loop to\nopen each PDF file one at a time. It's important to remember to change the '\\' to '/' \nfor Windows users when referring to directory positions. \n\nThe second step is to then scan through the PNG images with OCR. For this task, we\ncan use Tesseract. Tesseract is a Google project that is easy to use. Like Poppler,\nyou will need to download the application separately. You will also need to install \nthe helper `python` package `pytessseract`. The Tesseract application can be found\n[here](https://github.com/UB-Mannheim/tesseract/wiki). I have my program to save the \ndata in a CSV file, but you can store it anyway you want. I decided to save each PDF\nfile as a separate CSV file and assigning each row as a different PNG file or page \nof the PDF. This was to ensure that may data is easily organized \n\nThe next stages require getting into the `Langchain` library. These steps will be\nincluded in the follow-up to this post as both post, are quite lengthy and each can\nstand alone. \n\n# Converting PDF to PNG with Poppler\nAgain, prior to running this code, you will need to install the Poppler Application.\nYou also need to copy the directory to the location of the Poppler bin folder. The\nrest of this section is pretty simple, I've created a loop to go through every filename\nthat ends with '.pdf' in a specific PDF folder. I also save the PNG file with the page \nnumber included into the title. If the results from the OCR scans are inaccurate, you \ncan adjust the resolution of the PNG files with the parameter 'dpi = 300' passed to \nthe convert from path function. The default value is 100. Fair warning, increasing the\nresolution will slow down the entire process and can potentially add additional artifacts\ninto the OCR scan. \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport pandas as pd\nfrom PIL import Image\nfrom pdf2image import convert_from_path\n\npoppler_path = 'C:/Program Files/poppler-23.08.0/Library/bin'\nfor pdf_file in [f for f in os.listdir('//Desktop/PDF') if f.endswith('.pdf')]:\n  images = convert_from_path(pdf_path = '//Desktop/PDF/' + pdf_file, poppler_path = poppler_path)\n\n  for count, img in enumerate(images):\n    img_name = f\"{pdf_file[:-4]}_page_{count}.png\"\n    img.save('//Desktop/PDF/' + img_name, \"PNG\")\n```\n:::\n\n\n# OCR from PNG files\nThe Tesseract application is required for the next stage. Since every PNG from every\nPDF will need to go through the process, I've recreated the first section and included \nthe Tesseract functions into the same loop. I've also included a step to delete each \nPNG file after it has been scanned, since it will no longer be needed. The final stage \nis to save all the returned data as a CSV file. I have found that it is useful to \nspecify the encoding used in saving the CSV. \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport os\nimport pandas as pd\nfrom PIL import Image\nfrom pdf2image import convert_from_path\nimport pytesseract\n\npoppler_path = 'C:/Program Files/poppler-23.08.0/Library/bin'\npytesseract.pytesseract.tesseract_cmd = '//Tesseract-OCR/tesseract.exe'\n\nfor pdf_file in [f for f in os.listdir('//Desktop/PDF') if f.endswith('.pdf')]:\n  images = convert_from_path(pdf_path = '//Desktop/PDF' + pdf_file, poppler_path = poppler_path)\n  extracted_text = []\n  for count, img in enumerate(images):\n    img_name = f\"{pdf_file[:-4]}_page_{count}.png\"\n    img.save('//Desktop/PDF' + img_name, \"PNG\")\n    \n    extracted_data.append(pytesseract.image_to_string(Image.open('C:/Users/Mark/Desktop/PDF' + img_name)))\n    os.remove('//Desktop/PDF' + img_name)\n    \n  df = pd.DataFrame(extracted_text)\n  df.to_csv('//Desktop/PDF' + pdf_name[:-4] + '.csv', encoding = 'utf-8-sig')\n```\n:::\n\n\n# Conclusion\nWe are finally able to create a usable CSV file from a OCR scanned PDF file. The first\nstep was to convert the pdf into PNG files with Poppler. Each png is then scanned with \nTesseract. And the returned values are stored in a CSV file. By why would you want to go\nthrough all the steps in the first place? Well, we will need to proceed with the next post\nabout creating the ChatGPT chatbot. \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}