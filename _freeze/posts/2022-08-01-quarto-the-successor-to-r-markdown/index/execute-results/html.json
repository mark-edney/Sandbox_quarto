{
  "hash": "37886c91341bb2cd40e2bad77ab5e4f6",
  "result": {
    "markdown": "---\ntitle: 'Quarto: The successor to R Markdown'\nauthor: Mark Edney\ndate: '2022-08-01'\ncategories:\n  - How-to\n  - R\n  - Rmarkdown\n  - Python\ndraft: true\ndescription: 'A review of Quarto, the potenial successor to R Markdown'\nimage: \"\"\narchives:\n  - 2022/08\ntoc: true\ntoc-depth: 2\ntoc-location: left\ntoc-title: Contents\ntoccolor: red\n  \nformat: \n  html: \n    code-fold: true\n    code-tools: true\n    code-link: true\n---\n\n\n## Introduction\n\nRMarkdown has been a staple for any Data Scientist that programs in `R`. `Quarto` builds on that, with multiple language support and additional features. Because of its language independent design, qQuarto` requires an independent installation.\n\nI have spent the past week moving my blog from `blogdown` to `quarto`. There has been some challenges, but I am pretty happy with the new look. \n\n## Setup\n\nThe setup for Quarto is pretty simple. You will need to visit the quarto website to [download](https://quarto.org/docs/get-started/) the Quarto Command Line Interface (CLI). There are step by step instructions for your selected text editor. I am most familiar with RStudio for  `R` and VSCode for `Python`.\n\nFor Rstudio, it's pretty much just plug and play now. I didn't find any additional steps required. Just write you `RMarkdown` files as usual and save it is an `qmd` file. The process for Quarto for RStudio can be described by the following process flow:\n\n![Render qmd in RStudio](images/rstudio-qmd-how-it-works.png)\n\nIt is not much more difficult for VSCode, all you need to do is download the Quarto extension. The process flow is similar to RStudio but uses Jupyter instead if knitr.\n\n![Render qmd for VSCode](images/qmd-how-it-works.png)\n\nWith the setup complete, there should be no differences between text editors.\n\n## Code Chunk Options\n\nThe first new feature to explore the support for code chuck options within the code chunks. These options would usually live within the code chunk title line. Any supported option can be added with the `#| ` tag. I don't know how useful this feature is as would prefer the chunk options in the title. It could be useful for situations with many options as it does increase readability. \n![](images/qmd chunk options.png)\n\n\n\n\n\n## Code-folding\n\nOne of the neat new features is code-folding. When this feature is enabled in the the qmd YAML, the person viewing the document can hide/unhide code chunks. This can make it easier for them to read the document. This will only hide the code and not the results. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(msleep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 83\nColumns: 11\n$ name         <chr> \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Greater shor…\n$ genus        <chr> \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bos\", \"Bra…\n$ vore         <chr> \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi\", \"carn…\n$ order        <chr> \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorpha\", \"Art…\n$ conservation <chr> \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", NA, \"dome…\n$ sleep_total  <dbl> 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0, 5…\n$ sleep_rem    <dbl> NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.8, …\n$ sleep_cycle  <dbl> NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333, N…\n$ awake        <dbl> 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9, 21.0, 1…\n$ brainwt      <dbl> NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07000, 0…\n$ bodywt       <dbl> 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490, 0.04…\n```\n:::\n:::\n\n\nThis feature is enabled by making the following addition to the YAML. You would change the format from html to your required format such as pdf.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformat: \n  html: \n    code-fold: true\n    code-tools: true\n```\n:::\n\n\nWith the addition of the `code-tools: true` parameters, the reader can decide to hide all code chunks from the top of the document.\n\n## Code Linking\n\nA reader may not be familiar with all the functions that you use in your document so it may be useful to enable code linking. With code linking, a function in a code chunk will have a hyperlink to the documentation for that function. To work in `R`, this feature requires the `xml2` and `downlit` packages. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(as.factor(order) ~ sleep_total, data = msleep[complete.cases(msleep),] )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = as.factor(order) ~ sleep_total, data = msleep[complete.cases(msleep), \n    ])\n\nCoefficients:\n(Intercept)  sleep_total  \n    6.89826     -0.03103  \n```\n:::\n:::\n\n\n## Table of contents\n\nI think the best feature for `Quarto` is the floating table of contents. I can describe how much time and effort I've spent trying to get floating table of contents in a `Blogdown` blog. It didn't work for me, it would require getting deep into the weeds changing the css layout for my HUGO theme. Not worth the effort. \n\nAdding a floating table of contents in `Quarto` is simple. Just use the following code in the document YAML: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoc: TRUE\n```\n:::\n\n\nOne simple line of code in the YAML and you document has a floating table of contents. There is some additional customization, such as the level of headers to include.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoc:\n  toccolor: blue\n  toc-depth: 2\n  toc-location: right\n  toc-title: \"Contents\"\n```\n:::\n\n\n## Quarto vs Blogdown\n\nWith my experimentation with Quarto, I decided to move my `blogdown` blog to `Quarto`. In theory, this should be a simple switch with just copying all post from folder to another. `Quarto` can use rmd files, but the can easily be changed over to qmd files. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}