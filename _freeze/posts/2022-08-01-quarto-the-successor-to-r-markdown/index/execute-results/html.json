{
  "hash": "8faa405f99e3d1b9f73b8c018e70f014",
  "result": {
    "markdown": "---\ntitle: 'Quarto: The successor to R Markdown'\nauthor: Mark Edney\ndate: '2022-08-01'\ncategories:\n  - How-to\n  - R\n  - Rmarkdown\n  - Python\ndraft: false\ndescription: 'A review of Quarto, the potenial successor to R Markdown'\nimage: \"\"\narchives:\n  - 2022/08\ntoc: true\ntoc-depth: 2\ntoc-location: left\ntoc-title: Contents\n  \nformat: \n  html: \n    code-fold: show\n    code-tools: true\n    code-link: true\nbibliography: references.bib\nlink-citations: true\n---\n\n\n## Introduction\n\nRMarkdown has been a staple for any Data Scientist that programs in `R`. `Quarto` builds on that, with multiple language support and additional features. Because of its language independent design, `Quarto` requires an independent installation. [@quarto]\n\nI have spent the past week moving my blog from `blogdown` to `quarto`. There have been some challenges, but I am pretty happy with the new look. Let's start with the setup, it's a little more work than a regular package or module.\n\n## Setup\n\nThe setup for Quarto is pretty simple. You will need to visit the quarto website to [download](https://quarto.org/docs/get-started/) the Quarto Command Line Interface (CLI). There are step-by-step instructions for your selected text editor. I am most familiar with RStudio for `R` and VSCode for `Python`.\n\nFor Rstudio, it's pretty much just plug and play now. I did install the `Quarto` package, but all the commands can be done by the command line interface. Switching from `RMarkdown` is as simple as saving them as `qmd` file. The process for Quarto for RStudio can be described by the following process flow:\n\n![Render qmd in RStudio](images/rstudio-qmd-how-it-works.png)\n\nIt is not much more difficult for VSCode, all you need to do is download the Quarto extension. The process flow is similar to RStudio but uses Jupyter instead of knitr.\n\n![Render qmd for VSCode](images/qmd-how-it-works.png)\n\nWith the setup complete, there should be no differences between text editors.\n\n## Code Chunk Options\n\nThe first new feature to explore the support for code chuck options within the code chunks. These options would usually live within the code chunk title line. Any supported option can be added with the `#|` tag. This feature is useful for situations with many options, as it does increase readability.\n\n\n\n````markdown\n```{{r}}\n#| label: load\n#| include: true\n#| warning: false\n\nlibrary(tidyverse)\ndata(\"msleep\")\n```\n\n````\n\n\n\n## Code-folding\n\nOne of the neat new features is code-folding. When this feature is enabled in the qmd YAML, the person viewing the document can hide/unhide code chunks. This can make it easier for them to read the document. Only the code will be hidden, and not the results.\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(msleep)\n```\n:::\n\nThis feature is enabled by making the following addition to the YAML. You would change the format from HTML to your required format, such as PDF.\n\n::: {.cell}\n\n```{.r .cell-code}\nformat: \n  html: \n    code-fold: true\n    code-tools: true\n```\n:::\n\nWith the addition of the `code-tools: true` parameter, the reader can decide to hide all code chunks from the top of the document.\n\n## Figures\n\nQuarto provides a bunch of additional tools for displaying figures. You can assign values for captions, sub-captions, width and height. You can even create a figure with multiple plots with separate sub-captions.\n\n\n````markdown\n```{r}\n#| label: fig-sleep\n#| fig-cap: \"Sleeping habits of animals\"\n#| fig-subcap:\n#|   - \"Scatter plot of body weight by total sleep\"\n#|   - \"Violin plot of REM sleep by vore\"\n#| layout-ncol: 2\n\nmsleep %>%\n  drop_na(sleep_total, bodywt) %>%\n  ggplot(aes(y= sleep_total, x = bodywt)) +\n  geom_point(color = \"blue\") +\n  theme_minimal()\n\nmsleep %>%\n  group_by(vore) %>%\n  drop_na(sleep_rem, vore) %>%\n  ggplot(aes(y= sleep_rem, x = vore)) +\n  geom_violin(aes(fill = vore)) +\n  theme_minimal()\n```\n````\n\n\n::: {#fig-sleep .cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![Scatter plot of body weight by total sleep](index_files/figure-html/fig-sleep-1.png){#fig-sleep-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Violin plot of REM sleep by vore](index_files/figure-html/fig-sleep-2.png){#fig-sleep-2 width=672}\n:::\n\nSleeping habits of animals\n:::\n\n\nYou can now use cross-referencing for the figure by referencing the figure. This means that in your text, you can refer to the figure number and link to the figure. This will automatically update your figure numbers and is achieved by typing the '\\@' symbol followed by the figure label. As an example, '\\@fig-sleep' turns into @fig-sleep.\n\nThere is an additional option to let the figures take up the width of the entire page, but I would not recommend using it as it extends beyond the width of the body of your page. It requires the following code:\n\n\n\n````markdown\n```{r}\n#| column: page\n```\n\n````\n\n## Code Linking\n\nA reader may not be familiar with all the functions that you use in your document, so it may be useful to enable code linking. With code linking, a function in a code chunk will have a hyperlink to the documentation for that function. To work in `R`, this feature requires the `xml2` and `downlit` packages.\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(as.factor(order) ~ sleep_total, data = msleep[complete.cases(msleep),] )\n```\n:::\n\n## Table of contents\n\nI think the best feature for `Quarto` is the floating table of contents. I can't describe how much time and effort I've spent trying to get a floating table of contents in a `Blogdown` blog. It didn't work for me, it would require getting deep into the weeds changing the CSS layout for my HUGO theme. It was not worth the effort.\n\nAdding a floating table of contents in `Quarto` is simple. Just use the following code in the document YAML:\n\n::: {.cell}\n\n```{.r .cell-code}\ntoc: TRUE\n```\n:::\n\nOne simple line of code in the YAML and your document has a floating table of contents. There is some additional customization such as the level of headers, location and title.\n\n::: {.cell}\n\n```{.r .cell-code}\ntoc: true\ntoc-depth: 2\ntoc-location: left\ntoc-title: Contents\n```\n:::\n\n## Quarto vs Blogdown\n\nWith my experimentation with Quarto, I decided to move my `blogdown` blog to `Quarto`. In theory, this should be a simple switch, with just copying all post from folder to another. `Quarto` can use rmd files, but they can easily be changed over to qmd files. I decided to switch all my post to the qmd format and include some additional features. The Quarto site has extensive reference information for creating a blog. [@quarto-]\n\nI did have an issue with one of my post not rendering correctly. This maybe an issue with compatibility with the `stargazer` package. In the end, I decided to just remove the post altogether as I could get it to render correctly, and I prefer the `gt` over the `stargazer` package for creating good-looking tables.\n\n## Conclusion\n\nIt is easy to create great looking documents using `quarto`, whether that be with code in `python` or `R`. `Quarto` supports most of the features in `RMarkdown` with some fancy new ones. My personal favourite is the floating table of contents. I have also found that rendering a `Quarto` blog is a much smoother experience than rendering a `blogdown` blog.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}