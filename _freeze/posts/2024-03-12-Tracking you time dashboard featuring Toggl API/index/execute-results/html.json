{
  "hash": "0965874d09e9a3cad26b70036464129e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Tracking you time dashboard featuring Toggl API\nauthor: Mark Edney\ndate: 2024-03-12\ncategories: [How-to,Python,Dashboard]\ndraft: true\ndescription: 'A dashboard application that connects to the Toggl API to display tracked time.'\nimage: ''\narchives:\n  - 2024/03\ntoc: false\nengine: jupyter\nexecute:\n   enabled: true\nformat:\n  html:\n    code-fold: show\n    code-tools: true\n---\n\n# Introduction\n\nDo you lead a busy life? It sure feels like it, but how do you truly know how you spend your time? Would you like to focus your time on specific projects or specific tasks?\n\nThe solution is to start tracking you time. I personally, started tracking my time almost five years ago when I had multiple jobs. I was a full-time graduate student with a few part-time job. This created a demand on my time and I needed to manage my time well.\n\nI learnt about Toggl, a free easy to use time tracking application. It is simple to use on android with additional feature on their website. You simply start at timer and save it under a project. You can also capture the task which may be distinct from the project.\n\nIts really up to your own whims on the definition of project. You can track one-off task, like a household repair, but I try to keep these tasks grouped together in a unified project.\n\nI hadn't really done anything with the data I created tracking my time, so I thought it would be a great opportunity to learn how to create a dashboard in `python`.\n\n# Initialization\n\nAs always, we start with loading our python packages. There isn't really anything out of the ordinary, we will use the `requests` library to make our API call. You will need to create an account at the Toggl website and create a API key.\n\nI've saved the API key in my environmental variables, it is loaded into the script with the `os.environ` function. You also need to create a header for the API call, this is the part that caused the most difficulty for me as it is very specific in the format.\n\n::: {#534809ad .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport os\nimport base64\nimport requests\nimport json\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nkey = os.environ['Toggl']\n\nstring=key+':api_token'\nheaders={\n    'Authorization':'Basic '+base64.b64encode(string.encode('ascii')).decode('utf-8'),\n    \"Content-Type\": \"application/json\"   \n}\n```\n:::\n\n\n# Toggl API\n\nThis section goes more into the details for the API. The call accepts the following parameters: `since` for your starting date, `until` for you finishing date, `user_agent` this is your user account email and `workspace_id` which is found on the Toggl website when you click on your workspace. I have kept mine secret, you will need to replace them with your own values.\n\n::: {#cb600684 .cell execution_count=2}\n``` {.python .cell-code}\nparams = {\n    'since':'2020-01-01',\n    'until':'2020-12-31',\n    'user_agent': 'email',\n    'workspace_id' : \"workspace\"\n}\n```\n:::\n\n\n\n\nWith the header and parameters for the API call setup, we can now use the requests package to make the actual call. The API call returns a json document, for ease I will convert that json into a dataframe. We can than analyze what the API call has returned.\n\n::: {#d8da711b .cell execution_count=4}\n``` {.python .cell-code}\nresponse = requests.get('https://api.track.toggl.com/reports/api/v2/details', headers = headers, params= params)\nmy_json = json.loads(response.content)\ndf = pd.DataFrame(my_json['data'])\ndf['Month'] = pd.DatetimeIndex(df['start']).month\nprint(df.columns, df.head(5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['id', 'pid', 'tid', 'uid', 'description', 'start', 'end', 'updated',\n       'dur', 'user', 'use_stop', 'client', 'project', 'project_color',\n       'project_hex_color', 'task', 'billable', 'is_billable', 'cur', 'tags',\n       'Month'],\n      dtype='object')            id          pid   tid      uid    description  \\\n0  1825387165  162435592.0  None  4504525  Data Products   \n1  1825095042  162435592.0  None  4504525  Data Products   \n2  1824585854  150042491.0  None  4504525        Commute   \n3  1824350140  150042504.0  None  4504525   Walmart work   \n4  1824350131  150042491.0  None  4504525        Commute   \n\n                       start                        end  \\\n0  2020-12-31T20:26:49-05:00  2020-12-31T20:44:21-05:00   \n1  2020-12-31T16:56:40-05:00  2020-12-31T17:21:47-05:00   \n2  2020-12-30T22:55:00-05:00  2020-12-31T23:30:00-05:00   \n3  2020-12-30T14:24:04-05:00  2020-12-30T22:55:48-05:00   \n4  2020-12-30T14:24:02-05:00  2020-12-30T14:24:04-05:00   \n\n                     updated       dur     user  ...  client  \\\n0  2021-01-01T20:08:38-05:00   1052000  M2edney  ...    None   \n1  2020-12-31T20:26:49-05:00   1507000  M2edney  ...    None   \n2  2020-12-31T01:06:18-05:00  88500000  M2edney  ...    None   \n3  2020-12-30T22:55:49-05:00  30704000  M2edney  ...    None   \n4  2020-12-30T14:24:05-05:00      2000  M2edney  ...    None   \n\n              project project_color project_hex_color  task billable  \\\n0  Data Science Study             0           #9e5bd9  None     None   \n1  Data Science Study             0           #9e5bd9  None     None   \n2             Commute             0           #c7af14  None     None   \n3             Walmart             0           #d94182  None     None   \n4             Commute             0           #c7af14  None     None   \n\n  is_billable   cur tags Month  \n0       False  None   []    12  \n1       False  None   []    12  \n2       False  None   []    12  \n3       False  None   []    12  \n4       False  None   []    12  \n\n[5 rows x 21 columns]\n```\n:::\n:::\n\n\nThe issue with this method is that it only returns a limited number of values. We can see it only returned 50 time entries.\n\n::: {#35a19b60 .cell execution_count=5}\n``` {.python .cell-code}\nprint(len(df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n50\n```\n:::\n:::\n\n\nTo collect all entries within the time frame, we need to try something a little different. The json file does include two important attributes, the total count and the number of entries per page. With these two values, we can loop through all the pages of entries and concatenate them into a single dataframe. The previous attempt already retrieved the first page so we can start at the second. I also included some simple data cleanup to remove null entries and change the duration values into hrs.\n\n::: {#1f46c1c7 .cell execution_count=6}\n``` {.python .cell-code}\npage_count = int(my_json['total_count']/my_json['per_page']) + (my_json['total_count'] % my_json['per_page'] > 0)\nfor page in range(1, page_count):\n    params['page']= str(page)\n    response = requests.get('https://api.track.toggl.com/reports/api/v2/details', headers = headers, params= params)\n    my_json = json.loads(response.content)\n    df =pd.concat([df, pd.DataFrame(my_json['data'])])\n    \ndf['dur'] = df['dur']/1000/60/60\ndf = df[~df['project'].isnull()]\nprint(len(df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n863\n```\n:::\n:::\n\n\n# Simple Graphics\n\nBefore creating any complicated graphics for our dashboard, we should make a simple graphics. In this graph we total the duration's and split them by their labeled project. I use the `sns.barplot` from the`seaborn` library because it is well designed and simple to use. This simple graph, shows the total number of hours attributed to each project.\n\n::: {#40c8419c .cell execution_count=7}\n``` {.python .cell-code}\nsns.barplot(x='project', y= 'dur', data = df, estimator = 'sum', hue= 'project')\nplt.xticks(rotation=45)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n [Text(0, 0, 'Data Science Study'),\n  Text(1, 0, 'Commute'),\n  Text(2, 0, 'Walmart'),\n  Text(3, 0, 'Job Seeking'),\n  Text(4, 0, 'Thesis work'),\n  Text(5, 0, 'CHE215'),\n  Text(6, 0, 'CHE615'),\n  Text(7, 0, 'Mentoring'),\n  Text(8, 0, 'CHE616'),\n  Text(9, 0, 'CE8201'),\n  Text(10, 0, 'Writing course'),\n  Text(11, 0, 'Administrative')])\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-2.png){width=619 height=518}\n:::\n:::\n\n\n# Dash Dashboard\n\nThe dash dashboard has a pretty simple construction. I start with loading the libraries required. The basic libraries include 'Dash' for the basic functions, 'html' to design the dashboard layout with html and 'dcc' for adding additional core components including radio-buttons and graphs.\n\nInteractive graphs require some additional work. Interactive graphs require the use of the 'callback', 'Input' and 'Output' libraries. The input function is used to define the behaviour of the input componets, sush as the radio button. We assign the button an id and define that the component returned is the 'value'.\n\nI've also taken some monthly average values by using the `group_by` method. This creates a new dataframe which has multi-indexes which doesn't work well with plotly express graphs. I drop the indexes to column values with the `reset_index` method. I finished the summary data by sorting it by the start time with the `sort_values` method.\n\n::: {#d2a731db .cell execution_count=8}\n``` {.python .cell-code}\n# Import packages\nfrom dash import Dash, html, dash_table, dcc, callback, Output, Input, jupyter_dash\nimport pandas as pd\nimport plotly.express as px\n\njupyter_dash.default_mode=\"external\"\n\n# Initialize the app\napp = Dash(__name__)\n\ndf2= df.groupby(['Month', 'project']).sum().reset_index().sort_values('start')\n```\n:::\n\n\nThe next stage of the dashboard is the `app.layout`. This forms the skeleton of the dashboard and as such utilizes some basic `html`. Through some experimentation, I have found I've liked the styling of the tabs. With the tabs, I can display different content on different tabs. Some tabs will be interactive while others will not.\n\nTabs are created with the `dcc.Tabs` function were you provide a list of `dcc.Tab` functions as children. For any interactive component, you have to provide an \"id\" so you can reference to it later, this includes the tab setup itself. For this dashboard I've decided to have a Datatable on tab one, an interactive annual review chart on tab 2, and a monthly review chart on tab 3. I decided to only make tab 2 interactive as the chart in tab 3 already has some basic interactive features by the nature of being a plotly express graph.\n\n::: {#27445f61 .cell execution_count=9}\n``` {.python .cell-code}\n# App layout\napp.layout = html.Div([\n    dcc.Tabs(id=\"tabs\", value='tab-1', children=[\n        dcc.Tab(label='Data Table', value='tab-1'),\n        dcc.Tab(label='Annual Review', value='tab-2', children=[\n            dcc.RadioItems(options=['avg', 'count', 'sum'], value='sum', id='controls-and-radio-item')]),\n        dcc.Tab(label='Monthly Review', value='tab-3'),\n    ]),\n    html.Div(id='tabs-content')\n])\n```\n:::\n\n\nThe next stage is the callback functions which runs whenever an input component is changed. Mainly, it is where the interactive inputs and output are declared. You declare them with the previously mention `Output` and `Input` functions. It is here were you reference the components based on the `id`s that you have called them. Your outputs need to be declared prior to your inputs and the order of your inputs will affect your update function. The second part of each declaration is the component that is effected.\n\n::: {#545feba9 .cell execution_count=10}\n``` {.python .cell-code}\n@app.callback(\n  Output('tabs-content', 'children'),\n  Input('tabs', 'value'),\n  Input('controls-and-radio-item', 'value')\n  )\n```\n:::\n\n\nThe final step is to define the effect on your interactive elements in an update function. There are two components here for our dashboard, the updates due to the tab change and the updates from the radio button in the graph on tab 2. With an if statement, we return an HTML Div function/element with the corresponding content for that tab number. For those not familiar with HTML, a Div is just some user defined section.\n\n::: {#d20b8e59 .cell execution_count=11}\n``` {.python .cell-code}\ndef render_content(tab, hist):\n    if tab == 'tab-1':\n        return html.Div([\n            dash_table.DataTable(data=df.drop('tags', axis = 1).to_dict('records'), page_size=10)\n        ])\n    elif tab == 'tab-2':\n        return html.Div([\n            dcc.Graph(figure = px.histogram(df, x='project', y='dur', color = 'description', histfunc = hist),\n                     id='controls-and-graph')   \n        ])\n    elif tab == 'tab-3':\n        return html.Div([\n            dcc.Graph(figure = px.line(df2, y = 'dur', x = 'Month', color = 'project', markers=True))          \n        ])\n        \n# Run the app\nif __name__ == '__main__':\n    app.run(debug=True)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDash app running on http://127.0.0.1:8050/\n```\n:::\n:::\n\n\nOur program has now run a server to host the dashboard. You view the dashboard by opening the hyperlink or going to the default address 'http://127.0.0.1:8050/' in your internet browser. The server is host localy, mean I can not easily display the interactive features.\n\n# Conclusion\n\nWe have connected to the Toggl service with an API call. With this API call, we collected a years worth of time tracking data to create a local dataframe. Exploring the data with graphs helped us understand the structure and the quality of data in our dataframe. A simple dash dashboard was created with some interactive features takes to the Input and Output functions. This dashboard has multiple tabs, display different types of data on each tab. The first tab simply shows a table of the data as illustrated in the following image:\n\n![](images/tab1.png){fig-align=\"center\"}\n\nOn the second tab, we've created an interactive chart that uses a radio button. This radio button controls how the data in our chart will be aggregated.\n\n![](images/tab2.png)\n\nAnd on the final tab, we created a interactive graph with the plotly express library. This chart summaries or data on a month by month basis.\n\n![](images/tab3.png){fig-align=\"center\"}\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}