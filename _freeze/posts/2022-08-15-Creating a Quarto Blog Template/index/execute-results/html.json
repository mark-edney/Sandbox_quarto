{
  "hash": "3dd065d22d84a553df4654d388df9aa4",
  "result": {
    "markdown": "---\ntitle: 'Creating Posts for Quarto Blog'\nauthor: Mark Edney\ndate: \"2022-08-15\"\ncategories:\n  - How-to\n  - R\n  - Rmarkdown\n  - Quarto\n  - Shiny App\ndraft: false\ndescription: 'A guide in creating a template for Quarto Blog posts.'\nimage: \"template.jpg\"\narchives:\n  - 2022/08\ntoc: true\n\nformat: \n  html: \n    code-fold: show\n    code-tools: true\n    code-link: false\n---\n\n\n![](template.jpg){fig-align=\"center\"}\n\n# Introduction\n\nI have officially switched my blog from `blogdown` to `quarto` due to the new features that `quarto` adds. The move has not been painless, but most of the most important features remain the same. The feature this is currently missing in `quarto` that I cannot live without, is the 1 click creation of a new blog post. There are a few different ways to automate the creation of blog posts, here are a few that I've found.\n\n# RMD Template\n\nIt is fairly simple to create a new RMD template for the `markdown` package. These templates are available when you click File -\\> New File -\\> R Markdown... under the tab 'from template'. There are many templates available under the `rmarkdown` package, but you might have more templates from other packages. Unfortunately, this feature is not yet available in `quarto` for QMD files.\n\nSo, currently there is no way to create a QMD template, but there isn't a major difference between QMD and RMD files. An easy solution would be to create a RMD template with built-in `quarto` commands and when you use it to create a blog post you just save it as a QMD file. This will still require going through the steps of creating a RMD template.\n\nCreating a RMD template is pretty simple, it just requires creating two files and a folder. This is even easier if you use the `usethis` package with its `use_rmarkdown_template` function, as it will automatically create the structure.\n\nWithin the main template folder, you will have a 'skeleton' folder and a 'template.yaml' file. The YAML file will contain the name and description of the template. It also includes the parameter `create_dri` which will create a file in a nested folder if the option is true. The structure of the file is the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname: Quarto Blog Post\ndescription: >\n  Template for Quatro Blog post. \ncreate_dir: true\n```\n:::\n\n\nWithin the 'skeleton' folder, you will find a 'skeleton.RMD' files. This is the actual template structure. This file should have all the YAML, including QMD features, and the basic structure of your blog post. The following is a sample that I have created:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\ntitle: 'Post for Quarto Blog'\nauthor: Mark Edney\ndate: \"\"\ncategories:\n  - How-to\n  - R\n  - Rmarkdown\n  - Python\ndraft: true\ndescription: ''\nimage: \"\"\narchives:\n  - \"\"\ntoc: false\n\nformat: \n  html: \n    code-fold: false\n    code-tools: false\n    code-link: false\n---\n```\n:::\n\n\nWith the template setup, all you need to do is add it to a package. You can add it to any package, but I would recommend adding it to the `rmarkdown` package with the rest of its templates. The directory for this package in windows can be found somewhere like this: 'C:\\Users\\~login\\AppData\\Local\\R\\win-library\\~R version\\rmarkdown\\rmarkdown\\templates' With the folder moved over, you should be able to see your template listed when you create a RMD file after you restart R Studio.\n\nThis is a pretty easy way to create a `quarto` blog post, but there are additional steps required. You will need to manually type the date, saved the file as a QMD, and create whatever folder structure you like for your `quarto` blog. So, let's explore more options to make it even easier.\n\n# Whisker package\n\nThere are a few different packages available to create template files like the `brew` and `whisker` packages. I decided to try the `whisker` package as it seemed to be the easiest to learn. In the `whisker`, you create a template and refer to your parameters in the '{{}}' set of brackets.\n\nI decided to create a function that will accept the user input for the blog and apply it to the template. The function will then create the proper directory layout that I use for my blog posts.\n\n## Data\n\nThe first step is the creation of the data that will be passed to create the blog post. This data can be in the form of a Data Frame or a list. This list will contain all the dynamic parameters, including the user input. The only values that I wanted to get user input from was the title. This value is set to variable names which will be passed into the function later. You can also include calculated parameters, such as `sys.date()` to get the current date.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- list(title = title,\n               author = 'Mark Edney',\n               date = Sys.Date(),\n               categories = list(\"How-to\", \"R\", \"Rmarkdown\"),\n               draft = 'true',\n               description = \"''\",\n               image = \"''\",\n               archives = format(date, \"%Y/%m\"),\n               toc = 'false',\n               fold = \"show\",\n               tools = 'true',\n               link =  'false')\n```\n:::\n\n\n## Template\n\nThe creation of the template is pretty easy, you create a character with the desired structure. Again, you include the parameters in the template with the '{{}}' brackets. I also included markdown for an Introduction and Conclusion, as they should probably be included in every new post.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTemplate <- '---\ntitle: {{title}}\nauthor: {{author}}\ndate: {{date}}\ncategories: [{{categories}}]\ndraft: {{draft}}\ndescription: {{description}}\nimage: {{image}}\narchives:\n  - {{archives}}\ntoc: {{toc}}\n\nformat:\n  html: \n    code-fold: {{fold}}\n    code-tools: {{tools}}\n---\n\n# Introduction\n\n# Conclusion\n'\n```\n:::\n\n\n## Combining Function\n\nFinally, we create a single function that will tie everything together. By using the `dir.create` and `paste0` functions with the date from the data list, we create a new folder that has the date and the blog post title in its structure. We can then create the blog post with the `whisker::render` and `writeLines` functions. The same folder name is required to create the post in the folder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBlog_post <- function(title){\n  data <- list(...\n  \n  Template <- '---\ntitle: {{title}}...\n\n  dir.create(paste0(\"./posts/\",data$date, \"-\", title))\n  writeLines(whisker.render(Template, data),\n  paste0(\"./posts/\",data$date, \"-\", title, \"/index.qmd\"))\n}\n```\n:::\n\n\nThe function can be run by its own, saved to an r script file, or you can add it to your `.Rprofile` file so that it will be loaded every time you start R Studio. Then to create a post, you would use `Blog_post` and pass the blog title. If you're in the root file for your quarto blog, you shouldn't have an issue. If you are not, you might get an error saying you could not find the directory.\n\nSo creating a function is a pretty code solution and `whisker` is simple and easy to use. The one pain point for me is that the function needs to be loaded in the system by running an open r script file, using the `source` function and passing the r script name, or by including the function in the `.Rprofile`. None of these seem very intuitive to me, so I decided to proceed with the creation of an Addin.\n\n# Addins\n\nAddins are a special feature of RStudio with its only icon on the toolbar. This icon allows the user to run a set of R code from the toolbar. In order to create an Addin, you first need to create a package that includes all the code. \n\n## Package creation\n\nThe easiest way to create a package is from the template when you create a new project. This will create the basic structure needed for a package. You need to edit the description file to include information on the package. Here is the description for the package I have created:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPackage: Qpostr\nType: Package\nTitle: Create a Quarto Blog Post\nVersion: 0.1.0\nAuthor: Mark Edney\nMaintainer: Mark Edney <m2edney@gmail.com>\nDescription: This package is used to create an addin for creating a new Quarto blog post. This post is created using a default template using the whisker pakage. A Shiny gadget is utilized to get user input prior to the creataion of the blog post. \nLicense: Creative Commons Attribution-NonCommercial-NoDerivs 3.0 United States License\nEncoding: UTF-8\nLazyData: true\n```\n:::\n\n\nUnder the man folder, you need to create a Rd file for each function that will be included in your package. These Rd files will represent the help information when you use the help search for your function. This file will require the function name, an alias, a title for the help page, an example of it usage and a description. Here is a sample for the function that I have created. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n\\name{QGadget}\n\\alias{}\n\\title{Create a Qaurto Blog Post}\n\\usage{\nQgadget()\n}\n\\description{\nCreates a Quarto Blog Post in the posts directory from a template. Opens a Shiny Gadget to get user input before creating the post. Gadget is required for creating the addin.\n}\n```\n:::\n\n\n\nTo create the addin, we need some additional folders. From the main project directory, we need to create an 'inst' folder and an 'rstudio' folder in that. In the new 'rstudio' folder, we need to create a file called 'addins.dcf'. This file will contain about the addin. Here is a sample of mine:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nName: Quarto Blog Post\nDescription: Creates a new Quarto Blog post from template\nBinding: QGadget\nInteractive: true\n```\n:::\n\n\nIn this file, the binding refers to the function name that will be connected to the addin. The interactive feature determines whether you would like the code to just run or if you like the user to interact first. We keep all the r scripts in the 'R' folder from the project main directory. If you are satisfied with the addin being non-interactive, you can stop there and build the package from the build tab. This is a tab  near the environment and history tabs. Since I am not satisfied with a non-interactive addin, we need to create a Shiny Gadget and run that as the function.\n\n## Shiny Gadgets\n\nA shiny gadget is very similar to a shiny app with the UI and Server functions both in the same file. In an R script file, within the R folder under the project directory, we define a function, which will use functions from the `shiny` and `miniUI` libraries. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nQGadget <- function() {....}\n```\n:::\n\n\nSince we are using the `miniUI`, there are a different series of UI functions we can use. The following creates a basic UI that will ask the user for a title and for an Author name. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- miniUI::miniPage(\n  miniUI::gadgetTitleBar(\"Quarto Blog Post\"),\n  miniUI::miniContentPanel(\n    shiny::textInput(\"title\", \"Title\", placeholder = \"Post Title\"),\n    shiny::textInput(\"author\", \"Author\", placeholder = \"\")\n    )\n  )\n```\n:::\n\n\nThe server function just uses the `observeEvent` function to accept the information that the user submitted. The user data is than submitted to our previous `Blog_post` function to create a new blog post.\n\nAdditional the Shiny Gadget uses the `runGadget` function to  start the Gadget. The `dialogViewer` function is passed to create a new window for the gadget. The default behaviour would be to run in the viewer panel. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output, session) {\n  \n  shiny::observeEvent(input$done, {\n    Blog_post(input$title, input$author)\n      stopApp(\"Post Created\")\n      })\n  }\n\nshiny::runGadget(ui, server, viewer = shiny::dialogViewer(\"Quarto Blog Post\"))\n```\n:::\n\n\nAgain the previous function that we create to make a new Quarto blog post. This function is saved in the same rscript file as the Shiny Gadget, but not in the gadget function itself. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nBlog_post <- function(title, author){\n  data <- list(title = title,\n               author = author,\n               date = Sys.Date(),\n               categories = list(\"How-to\", \"R\", \"Rmarkdown\"),\n               draft = 'true',\n               description = \"''\",\n               image = \"''\",\n               archives = format(date, \"%Y/%m\"),\n               toc = 'false',\n               fold = \"show\",\n               tools = 'true',\n               link =  'false')\n\n  Template <- '---\ntitle: {{title}}\nauthor: {{author}}\ndate: {{date}}\ncategories: [{{categories}}]\ndraft: {{draft}}\ndescription: {{description}}\nimage: {{image}}\narchives:\n  - {{archives}}\ntoc: {{toc}}\n\nformat:\n  html:\n    code-fold: {{fold}}\n    code-tools: {{tools}}\n---\n\n# Introduction\n\n# Conclusion\n\n'\n\n  dir.create(paste0(\"./posts/\",data$date, \"-\", title))\n  writeLines(whisker::whisker.render(Template, data), paste0(\"./posts/\",data$date, \"-\", title, \"/index.qmd\"))\n  file.edit(paste0(\"./posts/\",data$date, \"-\", title, \"/index.qmd\"))\n}\n```\n:::\n\n# Conclusion\n\nIn summary, there is no native way to create a new `quarto` post at this time. We have explored multiple different solution\n\n* Create a RMD template make a document and rename it as a QMD\n* Use the `whisker` package to create template which accepts calculated fields\n* Store the `whisker` template in a function stored in a script file, or to be loaded by default in the `.Rprofile` file\n* Create an non-interactive addin by storing the function in a package\n* Create an interactive addin by making a Shiny Gadget. \n\nPersonally, my go to answer would be to use the interactive addin. If you are interested in installing the package I have create, feel free to use the following code to install it. After it is installed, you will need to restart R for the addin to be in the addin tab. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github('mark-edney/Qpostr')\n```\n:::\n\n```{=html}\nPhoto by <a href=\"https://unsplash.com/@kaleidico?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Kaleidico</a> on <a href=\"https://unsplash.com/s/photos/template-structure?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}